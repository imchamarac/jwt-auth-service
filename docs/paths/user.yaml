param:
    get:
        summary: Get user by ID
        description: Use to retrieve the user by user ID
        parameters:
            - in: path
              name: id
              required: true
              schema:
                  type: integer
                  example: 1
        responses:
            200:
                description: OK.
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: '../base.yaml#/components/schemas/Success'
                                - type: object
                                  properties:
                                      message:
                                          type: string
                                          example: Record found
                                      user:
                                          $ref: '../base.yaml#/components/schemas/User'
            401:
                $ref: '../base.yaml#/components/responses/Unauthorized'
            404:
                $ref: '../base.yaml#/components/responses/NotFound'
            500:
                $ref: '../base.yaml#/components/responses/ServerError'
        tags: [User]
        security:
            - bearerAuth: []

    put:
        summary: Update user by ID
        description: Use to update user names by user ID.
        parameters:
            - in: path
              name: id
              required: true
              schema:
                  type: integer
        requestBody:
            content:
                application/json:
                    schema:
                        $ref: '../base.yaml#/components/schemas/EditUser'
        responses:
            200:
                description: OK.
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: '../base.yaml#/components/schemas/Success'
                                - $ref: '../base.yaml#/components/schemas/RecordUpdated'
                                - type: object
                                  properties:
                                      message:
                                          type: string
                                          example: Record updated successfully
            401:
                $ref: '../base.yaml#/components/responses/Unauthorized'
            404:
                $ref: '../base.yaml#/components/responses/NotFound'
            500:
                $ref: '../base.yaml#/components/responses/ServerError'
        tags: [User]
        security:
            - bearerAuth: []

    delete:
        summary: Delete user by ID
        description: Use to delete an user by user ID.
        parameters:
            - in: path
              name: id
              required: true
              schema:
                  type: integer
        responses:
            200:
                description: OK.
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: '../base.yaml#/components/schemas/Success'
                                - $ref: '../base.yaml#/components/schemas/RecordUpdated'
                                - type: object
                                  properties:
                                      message:
                                          type: string
                                          example: Record deleted successfully
            401:
                $ref: '../base.yaml#/components/responses/Unauthorized'
            404:
                $ref: '../base.yaml#/components/responses/NotFound'
            500:
                $ref: '../base.yaml#/components/responses/ServerError'
        tags: [User]
        security:
            - bearerAuth: []

list:
    get:
        summary: Get users list
        description: Use to fetch all users
        responses:
            200:
                description: OK.
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: '../base.yaml#/components/schemas/Success'
                                - type: object
                                  properties:
                                      message:
                                          type: string
                                          example: Data fetch successful
                                      users:
                                          type: array
                                          items:
                                              $ref: '../schemas/user.yaml#/User'
            401:
                $ref: '../base.yaml#/components/responses/Unauthorized'
            404:
                $ref: '../base.yaml#/components/responses/NotFound'
            500:
                $ref: '../base.yaml#/components/responses/ServerError'
        tags: [User]
        security:
            - bearerAuth: []
