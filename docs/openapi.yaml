openapi: 3.1.0
info:
    version: 1.0.0
    title: Base doc
tags:
    - name: Auth
      description: Authentication endpoints.
    - name: User
      description: User endpoints.
paths:
    /auth/login:
        post:
            summary: User authentication
            description: Use to login a valid user and issue a JWT token.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LoginUser'
            responses:
                '200':
                    description: OK.
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: '#/components/schemas/Success'
                                    - type: object
                                      properties:
                                          message:
                                              type: string
                                              example: Login successful
                                          token:
                                              type: string
                                              example: Bearer accesstoken
                '400':
                    description: Bad Request.
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: '#/components/schemas/Error'
                                    - type: object
                                      properties:
                                          message:
                                              type: string
                                              example: Incorrect email or password, please check again!
                '422':
                    description: Validation Error.
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: '#/components/schemas/Error'
                                    - type: object
                                      properties:
                                          message:
                                              type: object
                                              properties:
                                                  email:
                                                      example: Email cannot be empty
                                                  password:
                                                      example: Password cannot be empty
                '500':
                    $ref: '#/components/responses/ServerError'
            tags:
                - Auth
    /auth/register:
        post:
            summary: User authentication
            description: Use to register a new user.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/NewUser'
            responses:
                '200':
                    description: OK.
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: '#/components/schemas/Success'
                                    - type: object
                                      properties:
                                          message:
                                              type: string
                                              example: User created successfully
                                          userId:
                                              type: integer
                                              example: 2
                '400':
                    description: BadRequest.
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: '#/components/schemas/Error'
                                    - type: object
                                      properties:
                                          message:
                                              type: string
                                              example: User with email already exists!
                '422':
                    description: Validation Error.
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: '#/components/schemas/Error'
                                    - type: object
                                      properties:
                                          message:
                                              type: object
                                              properties:
                                                  email:
                                                      example: Email cannot be empty
                                                  password:
                                                      example: Password cannot be empty
                                                  first_name:
                                                      example: First name cannot be empty
                                                  last_name:
                                                      example: Last name cannot be empty
                '500':
                    $ref: '#/components/responses/ServerError'
            tags:
                - Auth
    /user/{id}:
        get:
            summary: Get user by ID
            description: Use to retrieve the user by user ID
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: integer
                      example: 1
            responses:
                '200':
                    description: OK.
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: '#/components/schemas/Success'
                                    - type: object
                                      properties:
                                          message:
                                              type: string
                                              example: Record found
                                          user:
                                              $ref: '#/components/schemas/User'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '404':
                    $ref: '#/components/responses/NotFound'
                '500':
                    $ref: '#/components/responses/ServerError'
            tags:
                - User
            security:
                - bearerAuth: []
        put:
            summary: Update user by ID
            description: Use to update user names by user ID.
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/EditUser'
            responses:
                '200':
                    description: OK.
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: '#/components/schemas/Success'
                                    - $ref: '#/components/schemas/RecordUpdated'
                                    - type: object
                                      properties:
                                          message:
                                              type: string
                                              example: Record updated successfully
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '404':
                    $ref: '#/components/responses/NotFound'
                '500':
                    $ref: '#/components/responses/ServerError'
            tags:
                - User
            security:
                - bearerAuth: []
        delete:
            summary: Delete user by ID
            description: Use to delete an user by user ID.
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: integer
            responses:
                '200':
                    description: OK.
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: '#/components/schemas/Success'
                                    - $ref: '#/components/schemas/RecordUpdated'
                                    - type: object
                                      properties:
                                          message:
                                              type: string
                                              example: Record deleted successfully
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '404':
                    $ref: '#/components/responses/NotFound'
                '500':
                    $ref: '#/components/responses/ServerError'
            tags:
                - User
            security:
                - bearerAuth: []
    /user/list:
        get:
            summary: Get users list
            description: Use to fetch all users
            responses:
                '200':
                    description: OK.
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: '#/components/schemas/Success'
                                    - type: object
                                      properties:
                                          message:
                                              type: string
                                              example: Data fetch successful
                                          users:
                                              type: array
                                              items:
                                                  $ref: '#/components/schemas/User'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '404':
                    $ref: '#/components/responses/NotFound'
                '500':
                    $ref: '#/components/responses/ServerError'
            tags:
                - User
            security:
                - bearerAuth: []
components:
    schemas:
        LoginUser:
            type: object
            properties:
                email:
                    type: string
                    description: User email.
                    example: chamara@gmail.com
                password:
                    type: string
                    description: User password.
                    example: password
        Success:
            type: object
            properties:
                success:
                    type: boolean
        Error:
            type: object
            properties:
                success:
                    type: boolean
                    default: false
        EditUser:
            type: object
            properties:
                first_name:
                    type: string
                    description: User first name.
                    example: Chamara
                last_name:
                    type: string
                    description: User last name.
                    example: Chathuranga
                role:
                    type: string
                    description: User role.
                    example: 1
        NewUser:
            allOf:
                - type: object
                - $ref: '#/components/schemas/EditUser'
                - $ref: '#/components/schemas/LoginUser'
        User:
            allOf:
                - type: object
                  properties:
                      id:
                          type: integer
                          description: User ID.
                          example: 1
                      created_at:
                          type: integer
                          description: Date account created.
                          example: 0
                      updated_at:
                          type: integer
                          description: Date account last updated.
                          example: 0
                - $ref: '#/components/schemas/NewUser'
        RecordUpdated:
            type: object
            properties:
                count:
                    type: integer
                    example: 1
    responses:
        ServerError:
            description: Internal Server Error
            content:
                application/json:
                    schema:
                        allOf:
                            - $ref: '#/components/schemas/Error'
                            - type: object
                              properties:
                                  message:
                                      type: string
                                      default: Internal server error
        Unauthorized:
            description: Unauthorized
            content:
                application/json:
                    schema:
                        allOf:
                            - $ref: '#/components/schemas/Error'
                            - type: object
                              properties:
                                  message:
                                      type: string
                                      default: No auth token
        NotFound:
            description: Data Not Found
            content:
                application/json:
                    schema:
                        allOf:
                            - $ref: '#/components/schemas/Error'
                            - type: object
                              properties:
                                  message:
                                      type: string
                                      default: No record found
        UnprocessableEntity:
            description: Validation Error
            content:
                application/json:
                    schema:
                        allOf:
                            - $ref: '#/components/schemas/Error'
                            - type: object
                              properties:
                                  message:
                                      type: string
                                      default: Validation failed
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
